swagger: '2.0'
info:
  description: Cloud API which servers for schedulling apps
  title: Cloud Admin API
  contact:
    name: Alexandru-Mihai Cioplean, Alexandru Udristioiu
    email: udristioiualexandru@gmail.com
  license:
    name: MIT
    url: http://mit.org
  version: 1.1.0
paths:
  /app:
    get:
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - apps
      summary: Retrieves apps information by name
      operationId: GetAppsInfo
      parameters:
        - type: string
          description: user unique id
          name: USER-UUID
          in: header
          required: true
        - type: string
          description: role used for auth
          name: Authorization
          in: header
          required: true
        - type: array
          items:
            type: string
          collectionFormat: csv
          description: name of the apps
          name: appnames
          in: query
          required: true
        - type: string
          description: owner of the app
          name: username
          in: query
          required: true
        - type: string
          description: filter apps by description(keyword) or  is_running
          name: filter
          in: query
          allowEmptyValue: true
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/api.ApplicationData'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        '404':
          description: App Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
    put:
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - apps
      summary: Update app information
      operationId: UpdateApp
      parameters:
        - type: string
          description: role used for auth
          name: Authorization
          in: header
          required: true
        - type: string
          description: user unique id
          name: USER-UUID
          in: header
          required: true
      responses:
        '200':
          description: OK
          schema:
            type: string
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
    delete:
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - apps
      summary: Deletes app
      operationId: DeleteApp
      parameters:
        - type: string
          description: role used for auth
          name: Authorization
          in: header
          required: true
        - type: string
          description: user unique id
          name: USER-UUID
          in: header
          required: true
        - type: string
          description: name of the app you want to delete
          name: appname
          in: query
          required: true
        - type: string
          description: owner of the app
          name: username
          in: query
          required: true
      responses:
        '200':
          description: OK
          schema:
            type: string
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        '403':
          description: User not allowed as admin
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        '404':
          description: User Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
  /login:
    post:
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - users
      summary: Login user
      operationId: UserLogin
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/api.UserData'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        '404':
          description: User Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
  /register/app:
    post:
      consumes:
        - application/json
        - multipart/form-data
      produces:
        - application/json
      tags:
        - apps
      summary: Upload app to s3
      operationId: UploadApp
      parameters:
        - type: string
          description: role used for auth
          name: Authorization
          in: header
          required: true
        - type: string
          description: user unique id
          name: USER-UUID
          in: header
          required: true
        - type: string
          description: owner of  the app
          name: username
          in: query
          required: true
        - type: file
          description: zip archive which contains the code and description files(same name for both,description being txt)
          name: archive
          in: formData
          required: true
      responses:
        '200':
          description: OK
          schema:
            type: string
        '302':
          description: Already found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
  /register/user:
    post:
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - users
      summary: Register user
      operationId: UserRegister
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/api.UserData'
      responses:
        '200':
          description: OK
          schema:
            type: string
        '302':
          description: Already found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
  /user:
    put:
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - users
      summary: Updates user profile
      operationId: UpdateUserProfile
      parameters:
        - type: string
          description: role used for auth
          name: Authorization
          in: header
          required: true
        - type: string
          description: user unique id
          name: USER-UUID
          in: header
          required: true
      responses:
        '200':
          description: OK
          schema:
            type: string
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
  /user/{username}:
    get:
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - users
      summary: Retrieves user profile
      operationId: GetUserProfile
      parameters:
        - type: string
          description: username of the account
          name: username
          in: path
          required: true
        - type: string
          description: role used for auth
          name: Authorization
          in: header
          required: true
        - type: string
          description: user unique id
          name: USER-UUID
          in: header
          required: true
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/api.UserData'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        '404':
          description: User Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
    delete:
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - users
      summary: Deletes user
      operationId: DeleteUser
      parameters:
        - type: string
          description: role used for auth
          name: Authorization
          in: header
          required: true
        - type: string
          description: user unique id
          name: USER-UUID
          in: header
          required: true
        - type: string
          description: username of the account
          name: username
          in: path
          required: true
      responses:
        '200':
          description: OK
          schema:
            type: string
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        '404':
          description: User Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
definitions:
  api.ApplicationData:
    required:
      - name
      - description
      - is_running
    properties:
      description:
        type: string
      is_running:
        type: string
      name:
        type: string
  api.ErrorResponse:
    required:
      - status_code
      - message
    properties:
      message:
        type: string
      status_code:
        type: integer
        format: int32
  api.UserData:
    required:
      - username
      - password
    properties:
      applications:
        type: array
        items:
          type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
      want_notify:
        type: string
tags:
  - description: Managing users
    name: users
  - description: Managing apps
    name: apps
